<%= stylesheet_link_tag "video_page" %>

<div class="row">   
        <div class="col1">            
                
                <h3 id='filters' style="cursor:pointer;">Filters</h3>
                <div id='form_filters'>
                    <div class="form-group">
                        <label for="sel1">Academic Class</label><br>
                        <div class="styled-select" >
                        <%= collection_select :meta_tag, :class_id, @class_tags, :id, :value, {:prompt=>"Select"}, {:class => 'drop_down'}%>
                        </div>

                    </div>
                    <div class="form-group">
                        <label for="sel1">Subject</label><br>
                          
                        <div class="styled-select" >
                        <%= collection_select :meta_tag, :subject_id, @subject_tags, :id, :value, {:prompt=>"Select"}, {:class => 'drop_down'}%>
                        </div>            
                    </div>

                    <div class="form-group">
                        <label for="sel1">Concept Names</label><br>
                        <div class="styled-select" >
                        <%= collection_select :meta_tag, :concept_id, @concept_tags, :id, :value, {:prompt=>"Select"}, {:class => 'drop_down'}%>

                        <input type="hidden" name='page_no' value='1' id='page_no'>
                        </div>                
                    </div> 

                    <div class="form-group">
                        <label for="sel1">Type</label><br>
                        <div class="styled-select" >                     
                        <%= select_tag "asset_type", options_for_select(@asset_types), :prompt=>"Select", :class => 'drop_down' %>
                        </div>                                      
                    </div>                
                    <input type="submit" name="submit"  id="submit_by_filters" value="Search" class="btn btn-info pull-right">
                </div>
            

                
                <!-- <h3 id='search_id' style="cursor:pointer;">Search by ID's</h3>
                <div id='search_by_id'>
                
                <div class="form-group">
                    <div class="input-group">
                        <input type="text" class="form-control" name="search_input_id" id="search_input_id" placeholder="Seperate multiple ID's by ';'" required>
                        <div id='required_id'></div>
                    </div>
                </div>
                <input type="submit" name="submit1" id="submit_id" value="Search" class="btn btn-info pull-right">
                
                </div> -->
                

                <h3 id='search_name' style="cursor:pointer;">Search by Names</h3>
                
                <div id='search_by_name'>
                    
                        <div class="form-group">
                            <div class="input-group">
                                <input type="text" class="form-control" id="name" name="name" placeholder="Search multiple names by ';'" required>
                                <div id='required_name'></div>                      
                            </div>
                        </div>
                        <input type="submit" name="submit2" id="submit_by_name" value="Search" class="btn btn-info pull-right">
                    
                </div>

                
        </div>

    
    <div class="col2">
    <h3 style="display: inline-block">My Assets</h3>
    <%=link_to 'Download Csv', my_assets_csv_user_assets_path, class:'button'%>
    
     <table width=100% id="table_data" align="center">
        <div class="well">Click search to see assets... </div>
        <%= image_tag("processing.gif", id: 'img', width:'100') %>
        <div class='well' id='nodata'>Data not found...</div>
    </table>
    <div class="pagination_test"></div>
    </div>
</div>


<div id="mainform"></div>

<script>
    $('#filters').click(function(){
        $('#form_filters').show();
        $('#search_by_id').hide('slow');
        $('#search_by_name').hide('slow');
    });
    $('#search_id').click(function(){
        $('#form_filters').hide('slow');
        $('#search_by_id').show();
        $('#search_by_name').hide('slow');
    });
    $('#search_name').click(function(){
        $('#form_filters').hide('slow');
        $('#search_by_id').hide('slow');
        $('#search_by_name').show();
    });
</script>



<script>
// Fetch table data
function tableData(data, currentPage){
    totalCount = 0;
    //currentPage = 0;
    var displayData ="<table class='table table-hover' id='append_table' align='center'>";
        displayData += "<tbody>";
        $.each(data, function(i,elements)
        {                  
            displayData += '<tr id="'+elements.guid+'">';
            displayData += '<td><ul style="max-width:50px;"><li><strong>Name:</strong></li><li><strong>Subject:</strong></li><li><strong>Class:</strong></li><li><strong>Type:</strong></li><li><strong>Guid:</strong></li></ul></td>';
            displayData += '<td><ul style="width:250px;"><li>'+elements.name+'</li><li>'+elements.subject+'</li><li>'+elements.academic_class+'</li><li>'+elements.asset_type+'</li><li>'+elements.guid+'</li></ul></td>';
            displayData += '<td><ul style="max-width:65px;"><li><strong>Concept Name:</strong></li><li><strong>Uploaded on:</strong></li><li><strong>Status:</strong></li><li><strong># of Views:</strong></li></ul></td>';
            displayData += '<td><ul><li>'+elements.concept_name+'</li><li>'+elements.uploaded_date+'</li><li>'+elements.status+'</li><li>'+elements.no_of_views+'</li></ul></td>';
            displayData += '<td><input type="button" id="'+elements.name+'" onclick="edit('+i+')" class="button" value="Edit"></td></tr>';
            totalCount = elements['total_count'];

        }); 
        displayData +="</tbody></table>";
        $('#table_data').append(displayData);
        // Pagination navigateType:'navigator/full'
        //$('#table_data').tablePaginate({navigateType:'full',recordPerPage:5,buttonPosition:'after',totalCount: totalCount});
        $('.pagination_test').pagination({items: totalCount,itemsOnPage: 5,cssStyle: 'light-theme', currentPage: currentPage});

}
                

$("#submit_by_filters").click(function() {
    $('.well').hide();
    $('#img').show();
    $('.pagination_test').hide();
    $('body').append('<div id="over" style="position: absolute;top:0;left:0;width: 100%;height:100%;z-index:999;opacity:0.4;filter: alpha(opacity = 50)"></div>'); 

    var data = {
                    academic_class: $('#meta_tag_class_id').val(),
                    subject: $('#meta_tag_subject_id').val(),
                    concept_name: $('#meta_tag_concept_id').val(),
                    asset_type: $('#asset_type').val(),
                    page_no: $('#page_no').val()
                }

    $('#table_data > table').remove();
    $.get("/user_assets/my_assets.json", data ,function(data){
        $('#img').hide();
        $("#over").remove();
        if(data.length == 0)
        {
            $('#nodata').show();
        }
        else
        {
            tableData(data); 
            $('.pagination_test').show();                              
        }
    });    
             
});


$("#submit_by_name").click(function() {
    $('.well').hide();
    $('#img').show();
    $('.pagination_test').hide();
    $('body').append('<div id="over" style="position: absolute;top:0;left:0;width: 100%;height:100%;z-index:999;opacity:0.4;filter: alpha(opacity = 50)"></div>'); 

    var data = {
                    name: $('#name').val(),
                    page_no: $('#page_no').val()
                }

    $('#table_data > table').remove();
    $.get("/user_assets/my_assets.json", data ,function(data){
        $('#img').hide();
        $("#over").remove();
        if(data.length == 0)
        {
            $('#nodata').show();
            
        }
        else
        {           
            tableData(data);
            $('.pagination_test').show();
        }
    });               
});

$("#submit_id").click(function() {   
    $('.well').hide();
    $('#img').show();
    $('.pagination_test').hide();
    $('body').append('<div id="over" style="position: absolute;top:0;left:0;width: 100%;height:100%;z-index:999;opacity:0.4;filter: alpha(opacity = 50)"></div>'); 
    
    var data = {
                    guid: $('#search_input_id').val(),
                    page_no: $('#page_no').val()
                }

    $('#table_data > table').remove();
    $.get("/user_assets/my_assets.json", data ,function(data){
        $('#img').hide();
        $("#over").remove();
        if(data.length == 0)
        {
            $('#nodata').show();
            
        }
        else
        {                
            tableData(data);
            $('.pagination_test').show();
        }
    });        
});
</script>


<script>
function edit(value)
{
    var table = document.getElementsByTagName('table')[1];
    var row = table.rows[value];
    var guid = row.id;
    var guid_get = {guid: guid};



    $.get("/user_assets/edit_asset_catalog.json", guid_get ,function(data)
    {
        //$('#popupbox').append('<p>Name:'+data.class_tags[0].name+'</p>');
        var popup = "<div class='contactdiv'><form class='form1' action='#' id='contact'><img alt='Close' class='img' id='close' src='/assets/close.png' width='50'><h3>Edit Video/Pdf </h3><hr/><br/><label>Name: <span>*</span></label><br/><input type='text' id='assest_name' value='"+data.name+"' class='form-control' /><br/><input type='hidden' id='assest_guid' value='"+guid+"' /><br/>";

        popup += "<label>Academic Class: <span>*</span></label><br/>";
        popup += "<select class='form-control' id='academic_class'>";

        $.each( data.class_tags, function( key, val ) {
            popup += "<option value='" + val.id + "'>" + val.value + "</option>";
            });


        popup +=  "</select><br/><label>Subject: <span>*</span></label><br/><select class='form-control' id='subject'>";

        $.each( data.subject_tags, function( key, val ) {
            popup += "<option value='" + val.id + "'>" + val.value + "</option>";
            });

        popup +=  "</select><br/><label>Concept names:</label><br/><select class='form-control' id='concept_name'>";

        $.each( data.concept_tags, function( key, val ) {
            popup += "<option value='" + val.id + "'>" + val.value + "</option>";
            });

        popup += "</select><br/><input type='button' id='send' class='btn' value='Update'/><span>  </span><input type='button' class='cancel btn' value='Cancel'/><br/></form></div>";
        $("#mainform").empty();
        $("#mainform").append(popup);
    });
}

// div for popup

$(document).ready(function(){

    $("#close").live('click', function() {
        $('.contactdiv').css("display", "none");
    });
    $(".cancel").live('click', function() {
        $('.contactdiv').css("display", "none");
    });

    $("#send").live('click', function() {
        $('body').append('<div id="over" style="position: absolute;top:0;left:0;width: 100%;height:100%;z-index:999;opacity:0.4;filter: alpha(opacity = 50)"></div>');
        var data =  {
                        name: $("#assest_name").val(),
                        academic_class: $('#academic_class').val(),
                        subject: $('#subject').val(),
                        concept_name: $('#concept_name').val(),
                        guid: $('#assest_guid').val()    
                    }

         $.ajax({
            url: '/user_assets/update_asset_catalog.json',
            type: 'post',
            dataType: 'json',
            data: data,
            success: function (data) {
                alert('Edited...');
                $('.contactdiv').css("display", "none");
                $('#img').show();
                var totalCount = 0;

                var data = {
                        academic_class: $('#meta_tag_class_id').val(),
                        subject: $('#meta_tag_subject_id').val(),
                        concept_name: $('#meta_tag_concept_id').val(),
                        asset_type: $('#asset_type').val(),
                        page_no: $('#page_no').val()
                    }

            
                $('#table_data > table').remove();
                $.get("/user_assets/my_assets.json", data ,function(data){
                    $('#img').hide();
                    $("#over").remove();
             
                    tableData(data);
                });
            }
            
        });      
        
    });

});
</script>

<script type="text/javascript">
// pagination modified
(function($){

    var methods = {
        init: function(options) {
            var o = $.extend({
                items: 1,
                itemsOnPage: 1,
                pages: 0,
                displayedPages: 5,
                edges: 2,
                currentPage: 0,
                hrefTextPrefix: '#page-',
                hrefTextSuffix: '',
                prevText: 'Prev',
                nextText: 'Next',
                ellipseText: '&hellip;',
                ellipsePageSet: true,
                cssStyle: 'light-theme',
                listStyle: '',
                labelMap: [],
                selectOnClick: true,
                nextAtFront: false,
                invertPageOrder: false,
                useStartEdge : true,
                useEndEdge : true,
                onPageClick: function(pageNumber, event) {
                    $('#img').show();
                    $('.pagination_test').hide();
                    $('body').append('<div id="over" style="position: absolute;top:0;left:0;width: 100%;height:100%;z-index:999;opacity:0.4;filter: alpha(opacity = 50)"></div>');   
                 
                 var data = {
                                    academic_class: $('#meta_tag_class_id').val(),
                                    subject: $('#meta_tag_subject_id').val(),
                                    concept_name: $('#meta_tag_concept_id').val(),
                                    asset_type: $('#asset_type').val(),
                                    page_no: pageNumber
                                }

                    $('#table_data > table').remove();
                    $.get("/user_assets/my_assets.json", data ,function(data){
                        $('#img').hide();
                        $("#over").remove();
                        if(data.length == 0)
                        {
                            $('#nodata').show();                
                        }
                        else
                        {
                            tableData(data, pageNumber);
                            $('.pagination_test').show();          
                        }
                    });

                },
                onInit: function() {
                    // Callback triggered immediately after initialization
                }
            }, options || {});

            var self = this;

            o.pages = o.pages ? o.pages : Math.ceil(o.items / o.itemsOnPage) ? Math.ceil(o.items / o.itemsOnPage) : 1;
            if (o.currentPage)
                o.currentPage = o.currentPage - 1;
            else
                o.currentPage = !o.invertPageOrder ? 0 : o.pages - 1;
            o.halfDisplayed = o.displayedPages / 2;

            this.each(function() {
                self.addClass(o.cssStyle + ' simple-pagination').data('pagination', o);
                methods._draw.call(self);
            });

            o.onInit();

            return this;
        },

        selectPage: function(page) {
            methods._selectPage.call(this, page - 1);
            return this;
        },

        prevPage: function() {
            var o = this.data('pagination');
            if (!o.invertPageOrder) {
                if (o.currentPage > 0) {
                    methods._selectPage.call(this, o.currentPage - 1);
                }
            } else {
                if (o.currentPage < o.pages - 1) {
                    methods._selectPage.call(this, o.currentPage + 1);
                }
            }
            return this;
        },

        nextPage: function() {
            var o = this.data('pagination');
            if (!o.invertPageOrder) {
                if (o.currentPage < o.pages - 1) {
                    methods._selectPage.call(this, o.currentPage + 1);
                }
            } else {
                if (o.currentPage > 0) {
                    methods._selectPage.call(this, o.currentPage - 1);
                }
            }
            return this;
        },

        getPagesCount: function() {
            return this.data('pagination').pages;
        },

        setPagesCount: function(count) {
            this.data('pagination').pages = count;
        },

        getCurrentPage: function () {
            return this.data('pagination').currentPage + 1;
        },

        destroy: function(){
            this.empty();
            return this;
        },

        drawPage: function (page) {
            var o = this.data('pagination');
            o.currentPage = page - 1;
            this.data('pagination', o);
            methods._draw.call(this);
            return this;
        },

        redraw: function(){
            methods._draw.call(this);
            return this;
        },

        disable: function(){
            var o = this.data('pagination');
            o.disabled = true;
            this.data('pagination', o);
            methods._draw.call(this);
            return this;
        },

        enable: function(){
            var o = this.data('pagination');
            o.disabled = false;
            this.data('pagination', o);
            methods._draw.call(this);
            return this;
        },

        updateItems: function (newItems) {
            var o = this.data('pagination');
            o.items = newItems;
            o.pages = methods._getPages(o);
            this.data('pagination', o);
            methods._draw.call(this);
        },

        updateItemsOnPage: function (itemsOnPage) {
            var o = this.data('pagination');
            o.itemsOnPage = itemsOnPage;
            o.pages = methods._getPages(o);
            this.data('pagination', o);
            methods._selectPage.call(this, 0);
            return this;
        },

        getItemsOnPage: function() {
            return this.data('pagination').itemsOnPage;
        },

        _draw: function() {
            var o = this.data('pagination'),
                interval = methods._getInterval(o),
                i,
                tagName;

            methods.destroy.call(this);

            tagName = (typeof this.prop === 'function') ? this.prop('tagName') : this.attr('tagName');

            var $panel = tagName === 'UL' ? this : $('<ul' + (o.listStyle ? ' class="' + o.listStyle + '"' : '') + '></ul>').appendTo(this);

            // Generate Prev link
            if (o.prevText) {
                methods._appendItem.call(this, !o.invertPageOrder ? o.currentPage - 1 : o.currentPage + 1, {text: o.prevText, classes: 'prev'});
            }

            // Generate Next link (if option set for at front)
            if (o.nextText && o.nextAtFront) {
                methods._appendItem.call(this, !o.invertPageOrder ? o.currentPage + 1 : o.currentPage - 1, {text: o.nextText, classes: 'next'});
            }

            // Generate start edges
            if (!o.invertPageOrder) {
                if (interval.start > 0 && o.edges > 0) {
                    if(o.useStartEdge) {
                        var end = Math.min(o.edges, interval.start);
                        for (i = 0; i < end; i++) {
                            methods._appendItem.call(this, i);
                        }
                    }
                    if (o.edges < interval.start && (interval.start - o.edges != 1)) {
                        $panel.append('<li class="disabled"><span class="ellipse">' + o.ellipseText + '</span></li>');
                    } else if (interval.start - o.edges == 1) {
                        methods._appendItem.call(this, o.edges);
                    }
                }
            } else {
                if (interval.end < o.pages && o.edges > 0) {
                    if(o.useStartEdge) {
                        var begin = Math.max(o.pages - o.edges, interval.end);
                        for (i = o.pages - 1; i >= begin; i--) {
                            methods._appendItem.call(this, i);
                        }
                    }

                    if (o.pages - o.edges > interval.end && (o.pages - o.edges - interval.end != 1)) {
                        $panel.append('<li class="disabled"><span class="ellipse">' + o.ellipseText + '</span></li>');
                    } else if (o.pages - o.edges - interval.end == 1) {
                        methods._appendItem.call(this, interval.end);
                    }
                }
            }

            // Generate interval links
            if (!o.invertPageOrder) {
                for (i = interval.start; i < interval.end; i++) {
                    methods._appendItem.call(this, i);
                }
            } else {
                for (i = interval.end - 1; i >= interval.start; i--) {
                    methods._appendItem.call(this, i);
                }
            }

            // Generate end edges
            if (!o.invertPageOrder) {
                if (interval.end < o.pages && o.edges > 0) {
                    if (o.pages - o.edges > interval.end && (o.pages - o.edges - interval.end != 1)) {
                        $panel.append('<li class="disabled"><span class="ellipse">' + o.ellipseText + '</span></li>');
                    } else if (o.pages - o.edges - interval.end == 1) {
                        methods._appendItem.call(this, interval.end);
                    }
                    if(o.useEndEdge) {
                        var begin = Math.max(o.pages - o.edges, interval.end);
                        for (i = begin; i < o.pages; i++) {
                            methods._appendItem.call(this, i);
                        }
                    }
                }
            } else {
                if (interval.start > 0 && o.edges > 0) {
                    if (o.edges < interval.start && (interval.start - o.edges != 1)) {
                        $panel.append('<li class="disabled"><span class="ellipse">' + o.ellipseText + '</span></li>');
                    } else if (interval.start - o.edges == 1) {
                        methods._appendItem.call(this, o.edges);
                    }

                    if(o.useEndEdge) {
                        var end = Math.min(o.edges, interval.start);
                        for (i = end - 1; i >= 0; i--) {
                            methods._appendItem.call(this, i);
                        }
                    }
                }
            }

            // Generate Next link (unless option is set for at front)
            if (o.nextText && !o.nextAtFront) {
                methods._appendItem.call(this, !o.invertPageOrder ? o.currentPage + 1 : o.currentPage - 1, {text: o.nextText, classes: 'next'});
            }

            if (o.ellipsePageSet && !o.disabled) {
                methods._ellipseClick.call(this, $panel);
            }

        },

        _getPages: function(o) {
            var pages = Math.ceil(o.items / o.itemsOnPage);
            return pages || 1;
        },

        _getInterval: function(o) {
            return {
                start: Math.ceil(o.currentPage > o.halfDisplayed ? Math.max(Math.min(o.currentPage - o.halfDisplayed, (o.pages - o.displayedPages)), 0) : 0),
                end: Math.ceil(o.currentPage > o.halfDisplayed ? Math.min(o.currentPage + o.halfDisplayed, o.pages) : Math.min(o.displayedPages, o.pages))
            };
        },

        _appendItem: function(pageIndex, opts) {
            var self = this, options, $link, o = self.data('pagination'), $linkWrapper = $('<li></li>'), $ul = self.find('ul');

            pageIndex = pageIndex < 0 ? 0 : (pageIndex < o.pages ? pageIndex : o.pages - 1);

            options = {
                text: pageIndex + 1,
                classes: ''
            };

            if (o.labelMap.length && o.labelMap[pageIndex]) {
                options.text = o.labelMap[pageIndex];
            }

            options = $.extend(options, opts || {});

            if (pageIndex == o.currentPage || o.disabled) {
                if (o.disabled || options.classes === 'prev' || options.classes === 'next') {
                    $linkWrapper.addClass('disabled');
                } else {
                    $linkWrapper.addClass('active');
                }
                $link = $('<span class="current">' + (options.text) + '</span>');
            } else {
                $link = $('<a href="' + o.hrefTextPrefix + (pageIndex + 1) + o.hrefTextSuffix + '" class="page-link">' + (options.text) + '</a>');
                $link.click(function(event){
                    return methods._selectPage.call(self, pageIndex, event);
                });
            }

            if (options.classes) {
                $link.addClass(options.classes);
            }

            $linkWrapper.append($link);

            if ($ul.length) {
                $ul.append($linkWrapper);
            } else {
                self.append($linkWrapper);
            }
        },

        _selectPage: function(pageIndex, event) {
            var o = this.data('pagination');
            o.currentPage = pageIndex;
            if (o.selectOnClick) {
                methods._draw.call(this);
            }
            return o.onPageClick(pageIndex + 1, event);
        },


        _ellipseClick: function($panel) {
            var self = this,
                o = this.data('pagination'),
                $ellip = $panel.find('.ellipse');
            $ellip.addClass('clickable').parent().removeClass('disabled');
            $ellip.click(function(event) {
                if (!o.disable) {
                    var $this = $(this),
                        val = (parseInt($this.parent().prev().text(), 10) || 0) + 1;
                    $this
                        .html('<input type="number" min="1" max="' + o.pages + '" step="1" value="' + val + '">')
                        .find('input')
                        .focus()
                        .click(function(event) {
                            // prevent input number arrows from bubbling a click event on $ellip
                            event.stopPropagation();
                        })
                        .keyup(function(event) {
                            var val = $(this).val();
                            if (event.which === 13 && val !== '') {
                                // enter to accept
                                if ((val>0)&&(val<=o.pages))
                                methods._selectPage.call(self, val - 1);
                            } else if (event.which === 27) {
                                // escape to cancel
                                $ellip.empty().html(o.ellipseText);
                            }
                        })
                        .bind('blur', function(event) {
                            var val = $(this).val();
                            if (val !== '') {
                                methods._selectPage.call(self, val - 1);
                            }
                            $ellip.empty().html(o.ellipseText);
                            return false;
                        });
                }
                return false;
            });
        }

    };

    $.fn.pagination = function(method) {

        // Method calling logic
        if (methods[method] && method.charAt(0) != '_') {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' +  method + ' does not exist on jQuery.pagination');
        }

    };

})(jQuery);

</script>





